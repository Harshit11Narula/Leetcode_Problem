/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* head) {
       
        vector<int> ans;
        if(head==NULL) return ans;
        
        TreeNode* temp[1000];
        int top = -1;

       
        while(true){
            while(head!=NULL){
                if(head->right!=NULL)
                    temp[++top] =  head->right;
                temp[++top] = head;
                head = head->left;
            }
            head = temp[top--];
            if( top!=-1 && head->right!=NULL && temp[top]==head->right){
                temp[top] = head;
                head = head->right;
            }else{
                ans.push_back(head->val);
                head = NULL;
            }
            if(top==-1) break;
        }
        
        return ans;
        
        // Morris Traversal can do only inorder and preorder only
        //  TreeNode *cur , *pre;
        // cur = root;
        // while(cur!=NULL){
        //     if(cur->left == NULL){
        //         cur = cur->right;
        //     }else{
        //         pre = cur->left;
        //         while(pre->right!=NULL && pre->right!=cur) pre = pre->right;
        //         if(pre->right==NULL){
        //             pre->right = cur;
        //             cur = cur->left;
        //         }else{
        //             pre->right=  NULL;
        //             ans.push_back(cur->val);
        //             cur = cur->right;
        //         }
        //     }
        // }
        
    }
};
