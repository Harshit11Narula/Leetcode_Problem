class Solution {
public:
    int palindromePartition(string s, int k) {
        int  n = s.length();

         vector <vector<int>> dp(n , vector<int>(n , 0));
        for(int j=0;j<n-1;j++){
            if(s.at(j)==s.at(j+1))
                dp[j][j+1] = 0;
            else
                dp[j][j+1] = 1;
        }
        for(int len=3;len<=n;len++){
            for(int i=0;i<n - len+1;i++){
                int st = i;
                int en = i+len-1;
                if(s[st]==s[en]) dp[st][en] = dp[st+1][en-1];
                else dp[st][en] = dp[st+1][en-1] + 1;
               }
        }
        vector<vector<int>> dp2(n , vector<int>(k+1 , 1e8));
        
        for(int j=0;j<n;j++) dp2[j][1] = dp[0][j];
        
        for(int j=2;j<=k;j++){
            
           for(int i=j-1;i<n;i++){
               for(int p=i;p<n;p++){
                   dp2[p][j] = min(dp2[p][j] , dp2[i-1][j-1] + dp[i][p]);
               }
           }
            
           // for(int i=0;i<n;i++)
           //     cout<<dp2[i][j]<<" ";
           //  cout<<"\n";
            
        }
        return dp2[n-1][k];
    }
};
