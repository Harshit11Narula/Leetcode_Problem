class Solution {
public:
    
    int fun(vector<int>& arr , int st , int en , int k){
        int n = arr.size();
        vector<vector<int>> dp1(n , vector<int>(k+1 , 0)); // adj
        
        vector<vector<int>> dp2(n , vector<int>(k+1 , 0));
        
        for(int i=1;i<=k;i++){
            for(int j=st;j<=en;j++){
                dp1[j][i] = dp2[j-1][i-1] + arr[j];
                dp2[j][i] = max(dp2[j-1][i] , dp1[j-1][i]);
            }
        }
        return max(dp1[en][k] , dp2[en][k]);
    }
    
    
    int maxSizeSlices(vector<int>& arr) {
        int n  = arr.size();
        int k = n/3;
        
        int ans = 0;
        ans = max(ans , fun(arr, 2,  n-2 , k-1) + arr[0]);
        ans = max(ans , fun(arr , 1, n-1 , k));
        return ans;
    }
};
