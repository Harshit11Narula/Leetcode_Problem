class Solution {
public:
    int ans = 0;
    int dp[1000][1000];
    
    int fun(int x , int y , vector<vector<int>>& arr){
      
        if(dp[x][y]!=0) return dp[x][y];
        int ans = 1;
        if(x-1>=0 && arr[x][y] > arr[x-1][y]){
            ans = max(ans , 1 + fun(x-1 , y , arr));
        }
        if(y-1>=0 && arr[x][y] > arr[x][y-1]){
            ans = max(ans , 1 + fun(x , y-1 , arr));
        }
        if(x+1<arr.size() && arr[x][y] > arr[x+1][y]){
            ans = max(ans , 1 + fun(x+1 , y , arr));
        }
        if(y+1<arr[0].size() && arr[x][y] > arr[x][y+1]){
            ans = max(ans , 1 + fun(x , y+1 , arr));
        }
        dp[x][y] = ans;
       
        return ans;
    }
    
    int longestIncreasingPath(vector<vector<int>>& arr) {
        int ans = 0;
        for(int j=0;j<arr.size();j++)
            for(int i=0;i<arr[0].size();i++)
                dp[j][i] = 0;
        for(int j=0;j<arr.size();j++){
            for(int i=0;i<arr[0].size();i++)
                ans = max(ans , fun(j , i,  arr));
        }
        return ans;
        
        
    }
};
