class Solution {
public:
    bool flag = false;
    void fill(int a , int b , vector<vector<char>>& board){
        int used[10] = {0};
        for(int j=0;j<9;j++){
            if(board[a][j]>='0' && board[a][j]<='9'){
             //   cout<<board[a][j]<<" "<<a<<" "<<j<<"\n";
                used[board[a][j]-'0'] = 1;
            }
        }
        for(int j=0;j<9;j++){
            if(board[j][b]>='0' && board[j][b]<='9')
                used[board[j][b]-'0'] = 1;
        }
        
        for(int i=(a/3)*3;i<(a/3)*3 + 3;i++){
            for(int j=(b/3)*3; j<(b/3)*3+3;j++){
                if(board[i][j]>='0' && board[i][j]<='9'){
                     used[board[i][j]-'0'] = 1;
                }
            }
        }
        for(int j=1;j<=9;j++){
            if(flag) return;
            if(used[j]==0){
             //   cout<<a<<" "<<b<<" "<<j<<"\n";
                board[a][b] = j+'0';
                solveSudoku(board);
            }
        }
        if(flag) return;
        board[a][b] = '.';
        
        
    }
    
    
    
    void solveSudoku(vector<vector<char>>& board) {
        if(flag) return;
       // cout<<board[0][2]<<"\n";
        for(int j=0;j<9;j++){
            for(int i=0;i<9;i++){
                if(board[j][i]<'0'|| board[j][i]>'9'){
                    fill(j , i , board);
                    return;
                }
            }
        }
        flag = true;
        return;
    }
    
    
};
