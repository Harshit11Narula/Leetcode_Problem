class Solution {
public:
    
    
    
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        int arr[nums.size()];
        
        int id = 0;
        int sz = 0 , sum = 0;
        for(int j=1;j<nums.size();j++){
            nums[j] += nums[j-1];
        }
        for(int i=0;i<=nums.size()-k;i++){            
            if(i==0)
                arr[i] = nums[i+k-1];
            else
                arr[i] = nums[i+k-1] - nums[i-1];
        }
        int n = nums.size()-k;
        int dp[n+1][3][2];
        
        for(int j=0;j<=n;j++) for(int i=0;i<3;i++) dp[j][i][0] = -1e9 , dp[j][i][1] = -1e9;
        dp[0][0][0] = arr[0];
        for(int j=1;j<=n;j++) dp[j][0][0] = max(dp[j-1][0][0] , arr[j]);
        dp[k][1][0] = arr[k] + dp[0][0][0];
        dp[k][1][1] = 0;
        for(int j=k+1;j<=n;j++){
            dp[j][1][0] = dp[j-1][1][0];
            dp[j][1][1] = dp[j-1][1][1];
            for(int i=0;i<=j-k;i++){
                
                if(dp[i][0][0] + arr[j] > dp[j][1][0]){
                    dp[j][1][0] = dp[i][0][0] + arr[j];
                    dp[j][1][1]  = i;
                }
            }
        }
        dp[2*k][2][0] = arr[2*k] + dp[k][1][0];
        dp[2*k][2][1] = k;
        int ans = dp[2*k][2][0];
        int id3 = 2*k;
        int id2 = dp[id3][2][1];
        int id1 = dp[id2][1][1];
        for(int j=2*k+1;j<=n;j++){
            dp[j][2][0] = dp[j-1][2][0];
            dp[j][2][1] = dp[j-1][2][1];
            for(int i=k;i<=j-k;i++){
               if(dp[i][1][0] + arr[j] > dp[j][2][0]){
                    dp[j][2][0] = dp[i][1][0] + arr[j];
                    dp[j][2][1]  = i;
                }
            }
            if(dp[j][2][0] > ans){
                ans = dp[j][2][0];
                id3 = j;
                 id2 = dp[id3][2][1];
                id1 = dp[id2][1][1];
            }
        }
        vector<int> final_ans;
        final_ans.push_back(id1);
        final_ans.push_back(id2);
        final_ans.push_back(id3);
        
        return final_ans;
        
    }
};
