#include<bits/stdc++.h>
using namespace std;
#define ll long long int
ll const mod = 1e9+7;
class Solution {
public:
    
    
    
    vector<int> pathsWithMaxScore(vector<string>& board) {
        int n = board.size();
        vector<vector<ll>> dp(n , vector<ll>(n , 0));
        vector<vector<ll>> dp2(n , vector<ll>(n , 0));
        for(int j=n-1;j>=0;j--){
            for(int i=n-1;i>=0;i--){
                if(board[j][i]=='X') continue;
                if(board[j][i]=='S'){ 
                    dp2[j][i] = 0;
                    dp[j][i] = 1;
                    continue;
                }
                if(board[j][i]=='E') 
                    dp2[j][i] = 0;
                if(board[j][i]>='1' && board[j][i]<='9') 
                    dp2[j][i] = board[j][i] - '0';
                
               ll maxval = 0;
                if(i+1<n && board[j][i+1]!='X')
                   maxval = max(maxval , dp2[j][i+1]);
               if(i+1<n && j+1<n && board[j+1][i+1]!='X') 
                   maxval = max(maxval , dp2[j+1][i+1]);
                if(j+1<n && board[j+1][i]!='X') 
                   maxval = max(maxval , dp2[j+1][i]);
                
               if(i+1<n && board[j][i+1]!='X' && maxval == dp2[j][i+1])   
                    dp[j][i] += dp[j][i+1];
               if(i+1<n && j+1<n && board[j+1][i+1]!='X' && maxval==dp2[j+1][i+1]) 
                    dp[j][i] += dp[j+1][i+1];
                if(j+1<n && board[j+1][i]!='X' && maxval == dp2[j+1][i]) 
                    dp[j][i] += dp[j+1][i];
                
                dp[j][i]%=mod;
                dp2[j][i] += maxval;
             //   cout<<j<<" "<<i<<" "<<dp[j][i]<<" "<<dp2[j][i]<<"\n";
                
            }
            
        }
        if(dp[0][0]==0) return vector<int>{0 , 0};
        return vector<int>{(int)dp2[0][0] , (int)dp[0][0]};
   
        
    }
};
