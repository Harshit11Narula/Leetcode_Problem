class Solution {
public:
    
    int par[10001];
    vector<int> adj[10001];
    vector<pair<int , int> > ans[10001]; 
    pair<int , int> total[10001];
    int final_ans[10001];
    int parent[10001];
    
    pair<int , int>  dfs(int src , int par){
        parent[src] = par;
        int cnt = 0;
        int val = 0;
        for(int j=0;j<adj[src].size();j++){
            if(adj[src][j]!=par){
                int w = adj[src][j];
                pair<int , int> temp = dfs(w , src);
                cnt += temp.first;
                val += temp.second + temp.first;
                ans[src].push_back(temp);
            }else{
                ans[src].push_back({0 , 0});
            }
        }
        total[src] = {cnt , val};
        return {cnt+1 , val};
    }
    
    
    void dfs2(int src , int par , int n){
        int val = final_ans[par] - (total[src].second  + total[src].first) - 1;
        int cnt = n - total[src].first - 1;
        //cout<<src<<" "<<cnt<<" "<<val<<"\n";
        final_ans[src] = val + cnt + total[src].second;
        for(int j=0;j<adj[src].size();j++) 
            if(adj[src][j]!=par)
                dfs2(adj[src][j] , src , n);
    }
    
    
    vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& arr) {
        
        for(int j=0;j<arr.size();j++){
            int u= arr[j][0];
            int v = arr[j][1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        dfs(0 , -1);
        final_ans[0] = total[0].second;
       
        for(int i=0;i<adj[0].size();i++)
            dfs2(adj[0][i] , 0 , N);

        vector<int> qw;
        for(int j=0;j<N;j++) qw.push_back(final_ans[j]);
        return qw;
        
    }
};
