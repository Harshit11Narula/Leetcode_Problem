/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    map<pair<TreeNode* , int> , int> mp;
    
    int fun(TreeNode* root , int par){
        if(mp.find({root , par}) != mp.end()) return mp[{root , par}];
        if(root==NULL) return 0;
        if(par==0){
            int val = 1 + fun(root->left , 1) + fun(root->right , 1);
            if(root->left != NULL) val = min(val , fun(root->left , 2) + fun(root->right, 0));
            if(root->right != NULL) val = min(val , fun(root->left , 0) + fun(root->right, 2));
            mp[{root, par}] = val;
            return val;
        }
        
        if(par==2){
            int val =  1 + fun(root->left , 1) + fun(root->right , 1);
            mp[{root, par}] = val;
            return val;
        }
        
        if(par==1){
            int val = 1 + fun(root->left , 1) + fun(root->right , 1);
            val = min(val , fun(root->left , 0) + fun(root->right , 0));
            mp[{root, par}] = val;
            return val;
        }
        return 0;
    }
    
    
    int minCameraCover(TreeNode* root) {
        return fun(root , 0);
    }
};
